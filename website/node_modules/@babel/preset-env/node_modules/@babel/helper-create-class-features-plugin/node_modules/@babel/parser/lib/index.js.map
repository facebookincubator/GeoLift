{"version":3,"file":"index.js","sources":["../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment> | void) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype SyntaxPlugin = \"flow\" | \"typescript\" | \"jsx\" | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const value = stmt.expression.value;\n      const directive = super.stmtToDirective(stmt);\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used to track whether the apostrophe \"`\"\n// starts or ends a string template\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true),\n};\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  regexp: createToken(\"regexp\", { startsExpr }),\n  string: createToken(\"string\", { startsExpr }),\n  name: createToken(\"name\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // This is only needed to support % as a Hack-pipe topic token. If the proposal\n  // ends up choosing a different token, it can be merged with tt.assign.\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false\n        ? false\n        : options.strictMode === true\n        ? true\n        : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext === ct.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word) || tt.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        this.state.start,\n        Errors.InvalidEscapedReservedWord,\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // the prevType is required by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {\n    // Token-specific context update code\n    // Note that we should avoid accessing `this.prodParam` in context update,\n    // because it is executed immediately when last token is consumed, which may be\n    // before `this.prodParam` is updated. e.g.\n    // ```\n    // function *g() { () => yield / 2 }\n    // ```\n    // When `=>` is eaten, the context update of `yield` is executed, however,\n    // `this.prodParam` still has `[Yield]` production because it is not yet updated\n    const { context, type } = this.state;\n    switch (type) {\n      case tt.braceR:\n        context.pop();\n        break;\n      // we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\n      // ideally only dollarBraceL \"${\" needs a non-template context\n      // in order to indicate that the last \"`\" in `${`\" starts a new string template\n      // inside a template element within outer string template.\n      // but when we popped such context in `}`, we lost track of whether this\n      // `}` matches a `${` or other tokens matching `}`, so we have to push\n      // such context in every token that `}` will match.\n      case tt.braceL:\n      case tt.braceHashL:\n      case tt.dollarBraceL:\n        context.push(ct.brace);\n        break;\n      case tt.backQuote:\n        if (context[context.length - 1] === ct.template) {\n          context.pop();\n        } else {\n          context.push(ct.template);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport {\n  isTokenType,\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, template?: ErrorTemplate): void {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(\n          // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n          messageOrType,\n        )}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    if (!andThrow) {\n      return (\n        shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n      );\n    }\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      tokenIsKeyword(this.state.type) ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: { type: TokenType, value: any }): boolean {\n  return (\n    (state.type === tt.name || tokenIsKeyword(state.type)) &&\n    state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.PatternIsOptional);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentIsString = this.match(tt.string);\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !tokenIsKeyword(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          (this.match(tt.name) || tokenIsKeyword(this.state.type))\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (firstIdentIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              specifier.start,\n              Errors.ImportBindingIsString,\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const curContext = context[context.length - 1];\n        if (curContext === tc.j_oTag) {\n          context.length -= 2;\n        } else if (curContext === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport type { LookaheadState } from \"../../tokenizer/state\";\nimport State from \"../../tokenizer/state\";\n\ntype JSXLookaheadState = LookaheadState & { inPropertyName: boolean };\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore the contexts do always exist.\ntc.j_oTag = new TokContext(\"<tag\");\ntc.j_cTag = new TokContext(\"</tag\");\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    createLookaheadState(state: State): JSXLookaheadState {\n      const lookaheadState = ((super.createLookaheadState(\n        state,\n      ): any): JSXLookaheadState);\n      lookaheadState.inPropertyName = state.inPropertyName;\n      return lookaheadState;\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      super.updateContext(prevType);\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.exprAllowed = false;\n      } else if (type === tt.jsxTagStart) {\n        context.push(\n          tc.j_expr, // treat as beginning of JSX expression\n          tc.j_oTag, // start opening tag context\n        );\n      } else if (type === tt.jsxTagEnd) {\n        const out = context.pop();\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.exprAllowed = context[context.length - 1] === tc.j_expr;\n        } else {\n          this.state.exprAllowed = true;\n        }\n      } else if (\n        tokenIsKeyword(type) &&\n        (prevType === tt.dot || prevType === tt.questionDot)\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        this.state.exprAllowed = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { tokenOperatorPrecedence, tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.isRelational(\"<\")) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (!this.match(tt.name) || this.state.value !== \"asserts\") {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (this.match(tt.name)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(this.state.start, TSErrors.MissingInterfaceName);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.isRelational(\"<\")) {\n        let missingParenErrorPos;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorPos = this.state.pos;\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorPos) {\n          this.unexpected(missingParenErrorPos, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(\"static\") &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          this.state.start,\n          TSErrors.AbstractPropertyHasInitializer,\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash =\n      hasPlugin(plugins, \"recordAndTuple\") &&\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsKeyword,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/proposal-private-fields-in-in\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n      const { start } = left;\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(start, Errors.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(\"yield\")) {\n                throw this.raise(\n                  this.state.start,\n                  Errors.PipeBodyIsTighter,\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { start } = this.state;\n\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        start,\n        Errors.PipeUnparenthesizedBody,\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(start, Errors.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName =\n      !computed && this.match(tt.privateName) && this.state.value;\n    const property = computed\n      ? this.parseExpression()\n      : privateName\n      ? this.parsePrivateName()\n      : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    setInnerComments(node, call.innerComments);\n    // mark trailing comments of `async` to be inner comments\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        if (\n          this.isContextual(\"module\") &&\n          this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n          !this.hasFollowingLineBreak()\n        ) {\n          return this.parseModuleExpression();\n        }\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            this.resetPreviousNodeTrailingComments(id);\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            // If the next token begins with \"=\", commit to parsing an async\n            // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n            // expensive full-token lookahead on this common path.)\n            if (this.lookaheadCharCode() === charCodes.equalsTo) {\n              // although `id` is not used in async arrow unary function,\n              // we don't need to reset `async`'s trailing comments because\n              // it will be attached to the upcoming async arrow binding identifier\n              return this.parseAsyncArrowUnaryFunction(\n                this.startNodeAtNode(id),\n              );\n            } else {\n              // Otherwise, treat \"async\" as an identifier and let calling code\n              // deal with the current tt.name token.\n              return id;\n            }\n          } else if (this.match(tt._do)) {\n            this.resetPreviousNodeTrailingComments(id);\n            return this.parseDo(this.startNodeAtNode(id), true);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          this.state.start,\n          Errors.PrivateInExpectedIn,\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign:\n        if (\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" &&\n          this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\"\n        ) {\n          // If we find %= in an expression position, and the Hack-pipes proposal is active,\n          // then the % could be the topic token (e.g., in x |> %==y or x |> %===y), and so we\n          // reparse it as %.\n          // The next readToken() call will start parsing from =.\n\n          this.state.value = \"%\";\n          this.state.type = tt.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      // falls through\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          // A pipe-operator proposal is active,\n          // although its configuration might not match the current token’s type.\n          node = this.startNode();\n          const start = this.state.start;\n          const tokenType = this.state.type;\n\n          // Consume the current token.\n          this.next();\n\n          // If the pipe-operator plugin’s configuration matches the current token’s type,\n          // then this will return `node`, will have been finished as a topic reference.\n          // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n          return this.finishTopicReference(\n            node,\n            start,\n            pipeProposal,\n            tokenType,\n          );\n        }\n      }\n\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    start: number,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      let nodeType;\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        // The proposal must otherwise be \"hack\",\n        // as enforced by testTopicReferenceConfiguration.\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        // The topic reference is not allowed in the current context:\n        // it is outside of a pipe body.\n        // Raise recoverable errors.\n        if (pipeProposal === \"smart\") {\n          this.raise(start, Errors.PrimaryTopicNotAllowed);\n        } else {\n          // In this case, `pipeProposal === \"hack\"` is true.\n          this.raise(start, Errors.PipeTopicUnbound);\n        }\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        start,\n        Errors.PipeTopicUnconfiguredToken,\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    start: number,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        const pluginTopicToken = this.getPluginOption(\n          \"pipelineOperator\",\n          \"topicToken\",\n        );\n        return tokenLabelName(tokenType) === pluginTopicToken;\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(start, Errors.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, Errors.UnexpectedPrivateField);\n      }\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      const type = this.state.type;\n      (prop: $FlowFixMe).key =\n        type === tt.num ||\n        type === tt.string ||\n        type === tt.bigint ||\n        type === tt.decimal\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (tokenIsKeyword(type)) {\n      name = tokenLabelName(type);\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword(type), false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a Hack-style pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkHackPipeBodyEarlyErrors(startPos: number): void {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(startPos, Errors.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, Errors.PipelineTopicUnused);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (proposal === \"smart\") {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsLoop,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tt.privateName to tt.hash + tt.name for backward Babel 7 compat.\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (type === tt.privateName) {\n      if (!process.env.BABEL_8_BREAKING) {\n        const { loc, start, value, end } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(\n          i,\n          1,\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.hash),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc,\n          }),\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.name),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end,\n          }),\n        );\n        i++;\n        continue;\n      }\n    }\n    if (typeof type === \"number\") {\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        node.start,\n        Errors.IllegalBreakContinue,\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithUnescapedName =\n      this.match(tt.name) && !this.state.containsEsc;\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithUnescapedName &&\n        init.type === \"Identifier\" &&\n        init.name === \"async\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual = this.match(tt.name) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName && value === \"constructor\") {\n      this.raise(start, Errors.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(tt.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    const importedIsString = this.match(tt.string);\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","name","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","ErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","templates","keys","forEach","template","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","value","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","tt","num","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","getExportedToken","isTokenType","obj","context","pop","tc","j_expr","j_oTag","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","ct","exprAllowed","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","isRelational","op","expectRelational","unexpected","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","lookaheadState","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","typeCast","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","testTopicReferenceConfiguration","nodeType","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","parseMaybePrivateName","isPrivate","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","checkHackPipeBodyEarlyErrors","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","isString","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}