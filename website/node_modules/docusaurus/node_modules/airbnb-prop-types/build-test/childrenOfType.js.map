{"version":3,"sources":["../test/childrenOfType.jsx"],"names":["SFC","Component","React","describe","it","to","TypeError","assertPasses","validator","element","propName","componentName","equal","assertFails","be","instanceOf","Error","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { childrenOfType } from '..';\n\nimport callValidator from './_callValidator';\n\nfunction SFC() {}\nclass Component extends React.Component {} // eslint-disable-line react/prefer-stateless-function\n\ndescribe('childrenOfType', () => {\n  it('throws when not given a type', () => {\n    expect(() => childrenOfType()).to.throw(TypeError);\n  });\n\n  function assertPasses(validator, element, propName, componentName) {\n    expect(callValidator(validator, element, propName, componentName)).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName, componentName) {\n    expect(callValidator(validator, element, propName, componentName)).to.be.instanceOf(Error);\n  }\n\n  describe('with no children', () => {\n    it('passes when optional', () => {\n      assertPasses(\n        childrenOfType('span'),\n        (<div />),\n        'children',\n        'empty',\n      );\n    });\n\n    it('fails when required', () => {\n      assertFails(\n        childrenOfType('span').isRequired,\n        (<div />),\n        'children',\n        'empty required',\n      );\n    });\n  });\n\n  describe('with a single child of the specified type', () => {\n    it('passes with *', () => assertPasses(\n      childrenOfType('*'),\n      (<div><span /></div>),\n      'children',\n      '*!',\n    ));\n\n    it('passes with * when required', () => assertPasses(\n      childrenOfType('*').isRequired,\n      (<div><span /></div>),\n      'children',\n      '*! required',\n    ));\n\n    it('passes with a DOM element', () => assertPasses(\n      childrenOfType('span'),\n      (<div><span /></div>),\n      'children',\n      'span!',\n    ));\n\n    it('passes with a DOM element when required', () => assertPasses(\n      childrenOfType('span').isRequired,\n      (<div><span /></div>),\n      'children',\n      'span! required',\n    ));\n\n    it('passes with an SFC', () => assertPasses(\n      childrenOfType(SFC),\n      (<div><SFC default=\"Foo\" /></div>),\n      'children',\n      'SFC!',\n    ));\n\n    it('passes with an SFC when required', () => assertPasses(\n      childrenOfType(SFC).isRequired,\n      (<div><SFC default=\"Foo\" /></div>),\n      'children',\n      'SFC! required',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      childrenOfType(Component),\n      (<div><Component default=\"Foo\" /></div>),\n      'children',\n      'Component!',\n    ));\n\n    it('passes with a Component when required', () => assertPasses(\n      childrenOfType(Component).isRequired,\n      (<div><Component default=\"Foo\" /></div>),\n      'children',\n      'Component! required',\n    ));\n  });\n\n  describe('with multiple children of the specified type', () => {\n    it('passes with *', () => assertPasses(\n      childrenOfType('*'),\n      (\n        <div>\n          <span />\n          <SFC />\n          <Component />\n        </div>\n      ),\n      'children',\n      '*!',\n    ));\n\n    it('passes with * when required', () => assertPasses(\n      childrenOfType('*').isRequired,\n      (\n        <div>\n          <span />\n          <SFC />\n          <Component />\n        </div>\n      ),\n      'children',\n      '*! required',\n    ));\n\n    it('passes with a DOM element', () => assertPasses(\n      childrenOfType('span'),\n      (\n        <div>\n          <span />\n          <span />\n          <span />\n          <span />\n        </div>\n      ),\n      'children',\n      'span!',\n    ));\n\n    it('passes with a DOM element when required', () => assertPasses(\n      childrenOfType('span').isRequired,\n      (\n        <div>\n          <span />\n          <span />\n          <span />\n          <span />\n        </div>\n      ),\n      'children',\n      'span! required',\n    ));\n\n    it('passes with an SFC', () => assertPasses(\n      childrenOfType(SFC),\n      (\n        <div>\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n        </div>\n      ),\n      'children',\n      'SFC!',\n    ));\n\n    it('passes with an SFC when required', () => assertPasses(\n      childrenOfType(SFC).isRequired,\n      (\n        <div>\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n        </div>\n      ),\n      'children',\n      'SFC! required',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      childrenOfType(Component),\n      (\n        <div>\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n        </div>\n      ),\n      'children',\n      'Component!',\n    ));\n\n    it('passes with a Component when required', () => assertPasses(\n      childrenOfType(Component).isRequired,\n      (\n        <div>\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n        </div>\n      ),\n      'children',\n      'Component! required',\n    ));\n  });\n\n  describe('with children of the specified types passed as an array', () => {\n    it('passes with *', () => assertPasses(\n      childrenOfType('*').isRequired,\n      (\n        <div>\n          {[\n            <span key=\"one\" />,\n            <span key=\"two\" />,\n            <span key=\"three\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      '*!',\n    ));\n\n    it('passes with *', () => assertPasses(\n      childrenOfType('*').isRequired,\n      (\n        <div>\n          {[\n            <span key=\"one\" />,\n            <span key=\"two\" />,\n            <span key=\"three\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      '*! required',\n    ));\n\n    it('passes with a DOM element', () => assertPasses(\n      childrenOfType('span'),\n      (\n        <div>\n          {[\n            <span key=\"one\" />,\n            <span key=\"two\" />,\n            <span key=\"three\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      'span!',\n    ));\n\n    it('passes with an SFC', () => assertPasses(\n      childrenOfType(SFC),\n      (\n        <div>\n          {[\n            <SFC key=\"one\" default=\"Foo\" />,\n            <SFC key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      'SFC!',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      childrenOfType(Component),\n      (\n        <div>\n          {[\n            <Component key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <Component key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      'Component!',\n    ));\n\n    it('passes with multiple types', () => assertPasses(\n      childrenOfType(SFC, Component, 'span'),\n      (\n        <div>\n          {[\n            <span key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      'all three',\n    ));\n\n    it('passes with multiple types when required', () => assertPasses(\n      childrenOfType(SFC, Component, 'span').isRequired,\n      (\n        <div>\n          {[\n            <span key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n      'all three required',\n    ));\n\n    it('passes with multiple types including *', () => assertPasses(\n      childrenOfType(SFC, '*'),\n      (\n        <div>\n          {[\n            <span key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n            'text children',\n          ]}\n        </div>\n      ),\n      'children',\n      'SFC and *',\n    ));\n\n    it('passes with multiple types including * when required', () => assertPasses(\n      childrenOfType(SFC, '*').isRequired,\n      (\n        <div>\n          {[\n            <span key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n            'text children',\n          ]}\n        </div>\n      ),\n      'children',\n      'SFC and *',\n    ));\n  });\n\n  describe('when an unspecified type is provided as a child', () => {\n    it('fails expecting a DOM element', () => assertFails(\n      childrenOfType('span'),\n      (\n        <div>\n          <span />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n      'span!',\n    ));\n\n    it('fails expecting an SFC', () => assertFails(\n      childrenOfType(SFC),\n      (\n        <div>\n          <SFC default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n      'SFC!',\n    ));\n\n    it('fails expecting a Component', () => assertFails(\n      childrenOfType(Component),\n      (\n        <div>\n          <Component default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n      'Component!',\n    ));\n  });\n});\n"],"file":"childrenOfType.js"}