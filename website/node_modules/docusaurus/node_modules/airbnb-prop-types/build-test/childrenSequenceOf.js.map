{"version":3,"sources":["../test/childrenSequenceOf.jsx"],"names":["describe","it","childrenSequenceOf","to","equal","assertPasses","validator","element","propName","error","assertFails","be","instanceOf","Error","RangeError","undefined","TypeError","NaN","number","min","max","Infinity","isRequired","optional","twoPlus","twoOrLess","twoOrThree","oneOrTwo","string"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { number, string } from 'prop-types';\nimport React from 'react';\n\nimport { childrenSequenceOf } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('childrenSequenceOf', () => {\n  it('is a function', () => {\n    expect(typeof childrenSequenceOf).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    const error = callValidator(validator, element, propName, '\"childrenSequenceOf\" passing test');\n    expect(error).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    const error = callValidator(validator, element, propName, '\"childrenSequenceOf\" failing test');\n    expect(error).to.be.instanceOf(Error);\n  }\n\n  it('throws if not given at least one specifier', () => {\n    expect(() => childrenSequenceOf()).to.throw(RangeError);\n    expect(() => childrenSequenceOf(undefined)).to.throw(TypeError);\n    expect(() => childrenSequenceOf(null)).to.throw(TypeError);\n    expect(() => childrenSequenceOf([])).to.throw(TypeError);\n    expect(() => childrenSequenceOf('')).to.throw(TypeError);\n    expect(() => childrenSequenceOf(42)).to.throw(TypeError);\n    expect(() => childrenSequenceOf(NaN)).to.throw(TypeError);\n  });\n\n  it('throws if given an invalid validator', () => {\n    expect(() => childrenSequenceOf({ validator: null })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: undefined })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: false })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: [] })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: {} })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: '' })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator: 3 })).to.throw(TypeError);\n  });\n\n  it('throws given a non-positive-integer min or max', () => {\n    const validator = number;\n\n    expect(() => childrenSequenceOf({ validator, min: -1 })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: -1 })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: -1.4 })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: -1.4 })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: NaN })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: NaN })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: Infinity })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: Infinity })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: -Infinity })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: -Infinity })).to.throw(TypeError);\n  });\n\n  it('throws given inverted \"min\"/\"max\"', () => {\n    const validator = number;\n\n    expect(() => childrenSequenceOf({ validator, min: 2, max: 1 })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: 1, min: 2 })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: 2, max: 0 })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: 0, min: 2 })).to.throw(TypeError);\n\n    expect(() => childrenSequenceOf({ validator, min: 1, max: 0 })).to.throw(TypeError);\n    expect(() => childrenSequenceOf({ validator, max: 0, min: 1 })).to.throw(TypeError);\n\n    // \"min\" defaults to 1\n    expect(() => childrenSequenceOf({ validator, max: 0 })).to.throw(TypeError);\n  });\n\n  it('returns a function', () => {\n    expect(typeof childrenSequenceOf({ validator: number })).to.equal('function');\n  });\n\n  it('fails on a non-children prop', () => {\n    const validator = childrenSequenceOf({ validator: number });\n    assertFails(validator, (<div />), 'cousins');\n    assertFails(validator.isRequired, (<div />), 'cousins');\n  });\n\n  it('passes with null/undefined when optional', () => {\n    const validator = childrenSequenceOf({ validator: number });\n\n    assertPasses(validator, (<div />), 'children');\n    assertPasses(validator, (<div>{null}</div>), 'children');\n    assertPasses(validator, (<div>{undefined}</div>), 'children');\n  });\n\n  it('fails with null/undefined when required', () => {\n    const validator = childrenSequenceOf({ validator: number }).isRequired;\n\n    assertFails(validator, (<div />), 'children');\n    assertFails(validator, (<div>{null}</div>), 'children');\n    assertFails(validator, (<div>{undefined}</div>), 'children');\n  });\n\n  it('works with specifiers without \"max\"/\"min\"', () => {\n    const validator = childrenSequenceOf({ validator: number });\n\n    assertPasses(validator, (<div>{1}</div>), 'children');\n    assertPasses(validator.isRequired, (<div>{1}</div>), 'children');\n\n    assertPasses(validator, (<div>{NaN}</div>), 'children');\n    assertFails(validator.isRequired, (<div>{NaN}</div>), 'children');\n\n    assertPasses(validator, (<div>{-0}</div>), 'children');\n    assertPasses(validator.isRequired, (<div>{-0}</div>), 'children');\n\n    assertPasses(validator, (<div>{Infinity}</div>), 'children');\n    assertPasses(validator.isRequired, (<div>{Infinity}</div>), 'children');\n\n    assertFails(validator, (\n      <div>\n        {1}\n        {2}\n        {null}\n        <span />\n        {() => {}}\n      </div>\n    ), 'children');\n    assertFails(validator, (<div>1</div>), 'children');\n    assertFails(\n      validator,\n      <div>\n        1\n        {2}\n      </div>,\n      'children',\n    );\n  });\n\n  it('works with specifiers only providing \"min\"', () => {\n    const optional = childrenSequenceOf({ validator: number, min: 0 });\n    const twoPlus = childrenSequenceOf({ validator: number, min: 2 });\n\n    assertPasses(optional, (<div />), 'children');\n    assertFails(optional.isRequired, (<div />), 'children');\n\n    assertPasses(twoPlus, (<div />), 'children');\n    assertFails(twoPlus.isRequired, (<div />), 'children');\n\n    assertFails(twoPlus, (<div>{1}</div>), 'children');\n    assertPasses(\n      twoPlus,\n      <div>\n        {1}\n        {2}\n      </div>,\n      'children',\n    );\n    assertPasses(\n      twoPlus,\n      <div>\n        {1}\n        {2}\n        {3}\n      </div>,\n      'children',\n    );\n\n    assertFails(twoPlus, (<div>1</div>), 'children');\n    assertFails(\n      twoPlus,\n      <div>\n        1\n        {2}\n      </div>,\n      'children',\n    );\n    assertFails(\n      twoPlus,\n      <div>\n        {1}\n        2\n        {3}\n      </div>,\n      'children',\n    );\n  });\n\n  it('works with specifiers only providing \"max\"', () => {\n    const optional = childrenSequenceOf({ validator: number, max: 1 });\n    const twoOrLess = childrenSequenceOf({ validator: number, max: 2 });\n\n    assertPasses(optional, (<div />), 'children');\n    assertFails(optional.isRequired, (<div />), 'children');\n    assertPasses(twoOrLess, (<div />), 'children');\n    assertFails(twoOrLess.isRequired, (<div />), 'children');\n\n    assertPasses(twoOrLess, (<div>{1}</div>), 'children');\n    assertPasses(\n      twoOrLess,\n      <div>\n        {1}\n        {2}\n      </div>,\n      'children',\n    );\n\n    assertFails(\n      twoOrLess,\n      <div>\n        {1}\n        {2}\n        {3}\n      </div>,\n      'children',\n    );\n    assertFails(twoOrLess, (<div>1</div>), 'children');\n    assertFails(\n      twoOrLess,\n      <div>\n        1\n        {2}\n      </div>,\n      'children',\n    );\n    assertFails(\n      twoOrLess,\n      <div>\n        {1}\n        2\n        {3}\n      </div>,\n      'children',\n    );\n  });\n\n  it('works with specifiers with both \"min\" and \"max\"', () => {\n    const twoOrThree = childrenSequenceOf({ validator: number, min: 2, max: 3 });\n    const oneOrTwo = childrenSequenceOf({ validator: number, max: 2, min: 1 });\n\n    assertFails(twoOrThree, (<div>{1}</div>), 'children');\n    assertPasses(\n      twoOrThree,\n      <div>\n        {1}\n        {2}\n      </div>,\n      'children',\n    );\n    assertPasses(\n      twoOrThree,\n      <div>\n        {1}\n        {2}\n        {3}\n      </div>,\n      'children',\n    );\n    assertFails(\n      twoOrThree,\n      <div>\n        {1}\n        {2}\n        {3}\n        {4}\n      </div>,\n      'children',\n    );\n\n    assertFails(oneOrTwo.isRequired, (<div />), 'children');\n    assertPasses(oneOrTwo, (<div>{1}</div>), 'children');\n    assertPasses(\n      oneOrTwo,\n      <div>\n        {1}\n        {2}\n      </div>,\n      'children',\n    );\n    assertFails(\n      oneOrTwo,\n      <div>\n        {1}\n        {2}\n        {3}\n      </div>,\n      'children',\n    );\n  });\n\n  it('works with an optional unmet, and a required met, specifier', () => {\n    const validator = childrenSequenceOf(\n      { validator: string, min: 0 },\n      { validator: number },\n    );\n\n    assertPasses(\n      validator,\n      <div>\n        a\n        {1}\n      </div>,\n      'children',\n    );\n    assertPasses(validator, (<div>{1}</div>), 'children');\n    assertFails(validator, (<div>a</div>), 'children');\n    assertFails(\n      validator,\n      /* eslint react/jsx-curly-brace-presence: 0 */\n      <div>\n        a\n        {'b'}\n      </div>,\n      'children',\n    );\n    assertFails(\n      validator,\n      <div>\n        {1}\n        {2}\n      </div>,\n      'children',\n    );\n  });\n});\n"],"file":"childrenSequenceOf.js"}