{"version":3,"sources":["../test/componentWithName.jsx"],"names":["SFC","SFCwithName","displayName","Component","React","ComponentWithName","ComponentWithHOCs","describeIfForwardRefs","forwardRef","describe","skip","it","to","equal","TypeError","undefined","NaN","not","stripHOCS","stripHOCs","extra","notStrings","forEach","notString","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","isRequired","Reffy"],"mappings":"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","sourcesContent":["/* eslint\n  react/no-multi-comp: 0,\n  react/prefer-stateless-function: 0\n*/\n\nimport React from 'react';\nimport { expect } from 'chai';\n\nimport { componentWithName } from '..';\n\nimport callValidator from './_callValidator';\n\nfunction SFC() {}\n\nfunction SFCwithName() {}\nSFCwithName.displayName = 'SFC with a display name!';\n\nclass Component extends React.Component {}\n\nclass ComponentWithName extends React.Component {}\nComponentWithName.displayName = 'Component with a display name!';\n\nclass ComponentWithHOCs extends React.Component {}\nComponentWithHOCs.displayName = 'withA(withB(withC(Connect(X))))';\n\nconst describeIfForwardRefs = React.forwardRef ? describe : describe.skip;\n\ndescribe('componentWithName', () => {\n  it('returns a function', () => {\n    expect(typeof componentWithName('name')).to.equal('function');\n  });\n\n  it('throws when not given a string or a regex', () => {\n    expect(() => componentWithName()).to.throw(TypeError);\n    expect(() => componentWithName(null)).to.throw(TypeError);\n    expect(() => componentWithName(undefined)).to.throw(TypeError);\n    expect(() => componentWithName(true)).to.throw(TypeError);\n    expect(() => componentWithName(false)).to.throw(TypeError);\n    expect(() => componentWithName(42)).to.throw(TypeError);\n    expect(() => componentWithName(NaN)).to.throw(TypeError);\n    expect(() => componentWithName([])).to.throw(TypeError);\n    expect(() => componentWithName({})).to.throw(TypeError);\n  });\n\n  it('throws when given unknown options', () => {\n    expect(() => componentWithName('Foo', {})).not.to.throw();\n    expect(() => componentWithName('Foo', { stripHOCS: 'typo in the last \"s\"' })).to.throw(TypeError);\n    expect(() => componentWithName('Foo', { stripHOCs: [], extra: true })).to.throw(TypeError);\n  });\n\n  it('throws when given names of HOCs to strip that are not strings', () => {\n    const notStrings = [null, undefined, true, false, 42, NaN, [], {}, () => {}];\n    notStrings.forEach((notString) => {\n      expect(() => componentWithName('Foo', { stripHOCs: [notString] })).to.throw(TypeError);\n    });\n  });\n\n  it('throws when given names of HOCs to strip that have parens', () => {\n    expect(() => componentWithName('Foo', { stripHOCs: ['with()Foo'] })).to.throw(TypeError);\n  });\n\n  it('throws when given names of HOCs to strip that are not in camelCase', () => {\n    expect(() => componentWithName('Foo', { stripHOCs: ['with_foo'] })).to.throw(TypeError);\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.be.instanceOf(Error);\n  }\n\n  describe('with a single child of the specified name', () => {\n    it('passes with an SFC', () => assertPasses(\n      componentWithName('SFC'),\n      (<div><SFC default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with an SFC + displayName', () => assertPasses(\n      componentWithName(SFCwithName.displayName),\n      (<div><SFCwithName default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      componentWithName('Component'),\n      (<div><Component default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with a Component + displayName', () => assertPasses(\n      componentWithName(ComponentWithName.displayName),\n      (<div><ComponentWithName default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with a component with HOCs', () => {\n      assertPasses(\n        componentWithName('X', { stripHOCs: ['withA', 'withB', 'withC', 'Connect'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withC(Connect(X))', { stripHOCs: ['withA', 'withB'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withB(withC(Connect(X)))', { stripHOCs: ['withA', 'withC'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n    });\n  });\n\n  describe('with multiple children of the specified name', () => {\n    it('passes with an SFC', () => assertPasses(\n      componentWithName('SFC'),\n      (\n        <div>\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n          <SFC default=\"Foo\" />\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with an SFC + displayName', () => assertPasses(\n      componentWithName(SFCwithName.displayName),\n      (\n        <div>\n          <SFCwithName default=\"Foo\" />\n          <SFCwithName default=\"Foo\" />\n          <SFCwithName default=\"Foo\" />\n          <SFCwithName default=\"Foo\" />\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      componentWithName('Component'),\n      (\n        <div>\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n          <Component default=\"Foo\" />\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a Component + displayName', () => assertPasses(\n      componentWithName(ComponentWithName.displayName),\n      (\n        <div>\n          <ComponentWithName default=\"Foo\" />\n          <ComponentWithName default=\"Foo\" />\n          <ComponentWithName default=\"Foo\" />\n          <ComponentWithName default=\"Foo\" />\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a component with HOCs', () => {\n      assertPasses(\n        componentWithName('X', { stripHOCs: ['withA', 'withB', 'withC', 'Connect'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n          </div>\n        ),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withC(Connect(X))', { stripHOCs: ['withA', 'withB'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n          </div>\n        ),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withB(withC(Connect(X)))', { stripHOCs: ['withA', 'withC'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n            <ComponentWithHOCs default=\"Foo\" />\n          </div>\n        ),\n        'children',\n      );\n    });\n  });\n\n  describe('with children of the specified names passed as an array', () => {\n    it('passes with an SFC', () => assertPasses(\n      componentWithName('SFC'),\n      (\n        <div>\n          {[\n            <SFC key=\"one\" default=\"Foo\" />,\n            <SFC key=\"two\" default=\"Foo\" />,\n            <SFC key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with an SFC + displayName', () => assertPasses(\n      componentWithName(SFCwithName.displayName),\n      (\n        <div>\n          {[\n            <SFCwithName key=\"one\" default=\"Foo\" />,\n            <SFCwithName key=\"two\" default=\"Foo\" />,\n            <SFCwithName key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      componentWithName('Component'),\n      (\n        <div>\n          {[\n            <Component key=\"one\" default=\"Foo\" />,\n            <Component key=\"two\" default=\"Foo\" />,\n            <Component key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a Component + displayName', () => assertPasses(\n      componentWithName(ComponentWithName.displayName),\n      (\n        <div>\n          {[\n            <ComponentWithName key=\"one\" default=\"Foo\" />,\n            <ComponentWithName key=\"two\" default=\"Foo\" />,\n            <ComponentWithName key=\"three\" default=\"Foo\" />,\n          ]}\n        </div>\n      ),\n      'children',\n    ));\n\n    it('passes with a component with HOCs', () => {\n      assertPasses(\n        componentWithName('X', { stripHOCs: ['withA', 'withB', 'withC', 'Connect'] }),\n        (\n          <div>\n            {[\n              <ComponentWithHOCs key=\"one\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"two\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"three\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"four\" default=\"Foo\" />,\n            ]}\n          </div>\n        ),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withC(Connect(X))', { stripHOCs: ['withA', 'withB'] }),\n        (\n          <div>\n            {[\n              <ComponentWithHOCs key=\"one\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"two\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"three\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"four\" default=\"Foo\" />,\n            ]}\n          </div>\n        ),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName('withB(withC(Connect(X)))', { stripHOCs: ['withA', 'withC'] }),\n        (\n          <div>\n            {[\n              <ComponentWithHOCs key=\"one\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"two\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"three\" default=\"Foo\" />,\n              <ComponentWithHOCs key=\"four\" default=\"Foo\" />,\n            ]}\n          </div>\n        ),\n        'children',\n      );\n    });\n  });\n\n  describe('when an unspecified name is provided as a child', () => {\n    it('fails with an SFC', () => assertFails(\n      componentWithName('SFC'),\n      (\n        <div>\n          <SFC default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n    ));\n\n    it('fails with an SFC + displayName', () => assertFails(\n      componentWithName(SFCwithName.displayName),\n      (\n        <div>\n          <SFCwithName default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n    ));\n\n    it('fails with a Component', () => assertFails(\n      componentWithName('Component'),\n      (\n        <div>\n          <Component default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n    ));\n\n    it('fails with a Component + displayName', () => assertFails(\n      componentWithName(ComponentWithName.displayName),\n      (\n        <div>\n          <ComponentWithName default=\"Foo\" />\n          <section>No way.</section>\n        </div>\n      ),\n      'children',\n    ));\n\n    it('fails with a component with HOCs', () => {\n      assertFails(\n        componentWithName('X', { stripHOCs: ['withA', 'withB', 'withC', 'Connect'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <section>No way.</section>\n          </div>\n        ),\n        'children',\n      );\n\n      assertFails(\n        componentWithName('withC(Connect(X))', { stripHOCs: ['withA', 'withB'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <section>No way.</section>\n          </div>\n        ),\n        'children',\n      );\n\n      assertFails(\n        componentWithName('withB(withC(Connect(X)))', { stripHOCs: ['withA', 'withC'] }),\n        (\n          <div>\n            <ComponentWithHOCs default=\"Foo\" />\n            <section>No way.</section>\n          </div>\n        ),\n        'children',\n      );\n    });\n  });\n\n  describe('when a regex value is provided instead of a string', () => {\n    it('passes with an SFC', () => assertPasses(\n      componentWithName(/FC$/),\n      (\n        <div><SFC default=\"Foo\" /></div>\n      ),\n      'children',\n    ));\n\n    it('passes with an SFC + displayName', () => assertPasses(\n      componentWithName(/display name/),\n      (\n        <div><SFCwithName default=\"Foo\" /></div>\n      ),\n      'children',\n    ));\n\n    it('passes with a Component', () => assertPasses(\n      componentWithName(/^Comp/),\n      (<div><Component default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with a Component + displayName', () => assertPasses(\n      componentWithName(/display name/),\n      (<div><ComponentWithName default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('passes with a component with HOCs', () => {\n      assertPasses(\n        componentWithName(/^X$/, { stripHOCs: ['withA', 'withB', 'withC', 'Connect'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName(/^withC\\(Connect\\(X\\)\\)$/, { stripHOCs: ['withA', 'withB'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertPasses(\n        componentWithName(/^withB\\(withC\\(Connect\\(X\\)\\)\\)$/, { stripHOCs: ['withA', 'withC'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n    });\n\n    it('fails when SFC name does not match the regex provided', () => assertFails(\n      componentWithName(/foobar/),\n      (<div><SFC default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('fails when Component name does not match the regex provided', () => assertFails(\n      componentWithName(/foobar/),\n      (<div><Component default=\"Foo\" /></div>),\n      'children',\n    ));\n\n    it('fails with a component with HOCs that does not match the regex', () => {\n      assertFails(\n        componentWithName(/^zX$/, { stripHOCs: ['withA', 'withB', 'withC'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertFails(\n        componentWithName(/^zwithC\\(X\\)$/, { stripHOCs: ['withA', 'withB'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n\n      assertFails(\n        componentWithName(/^zwithB\\(withC\\(X\\)\\)$/, { stripHOCs: ['withA', 'withC'] }),\n        (<div><ComponentWithHOCs default=\"Foo\" /></div>),\n        'children',\n      );\n    });\n  });\n\n  it('fails when the provided prop is not a component', () => assertFails(\n    componentWithName('SFC'),\n    (\n      <div>\n        Blah blah blah.\n      </div>\n    ),\n    'children',\n  ));\n\n  it('passes when the prop is null', () => assertPasses(\n    componentWithName('SFC'),\n    (\n      <div a={null} />\n    ),\n    'a',\n  ));\n\n  it('passes when the prop is absent', () => assertPasses(\n    componentWithName('SFC'),\n    (\n      <div />\n    ),\n    'a',\n  ));\n\n  describe('when the prop is required', () => {\n    it('fails when the prop is null', () => assertFails(\n      componentWithName('SFC').isRequired,\n      (<div a={null} />),\n      'a',\n    ));\n\n    it('passes when the prop is the right component', () => assertPasses(\n      componentWithName('SFC').isRequired,\n      (<div a={<SFC />} />),\n      'a',\n    ));\n  });\n\n  describeIfForwardRefs('Forward Refs', () => {\n    it('passes on a forward ref', () => {\n      const Reffy = React.forwardRef(() => <main />);\n      Reffy.displayName = 'Reffy Name';\n      assertPasses(\n        componentWithName('Reffy Name').isRequired,\n        (<div a={<Reffy />} />),\n        'a',\n      );\n    });\n  });\n});\n"],"file":"componentWithName.js"}