{"version":3,"sources":["../test/disallowedIf.jsx"],"names":["describe","it","any","to","TypeError","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","bool","isRequired"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;AAEAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,sBAAO;AAAA,aAAM,oBAAa,IAAb,EAAmB,OAAnB,EAA4BC,cAA5B,CAAN;AAAA,KAAP,EAA+CC,EAA/C,UAAwDC,SAAxD;AACA,sBAAO;AAAA,aAAM,oBAAaF,cAAb,EAAkB,OAAlB,CAAN;AAAA,KAAP,EAAyCC,EAAzC,UAAkDC,SAAlD;AACA,sBAAO;AAAA,aAAM,oBAAaF,cAAb,EAAkB,IAAlB,EAAwBA,cAAxB,CAAN;AAAA,KAAP,EAA2CC,EAA3C,UAAoDC,SAApD;AACD,GAJC,CAAF;AAMAH,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC7B,8BAAc,oBAAaC,cAAb,EAAkB,OAAlB,EAA2BA,cAA3B,CAAd,GAA+CC,EAA/C,CAAkDE,KAAlD,CAAwD,UAAxD;AACD,GAFC,CAAF;;AAIA,WAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,CAAP,EAAoDN,EAApD,CAAuDE,KAAvD,CAA6D,IAA7D;AACD;;AAED,WAASK,WAAT,CAAqBH,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmD;AACjD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,CAAP,EAAoDN,EAApD,CAAuDQ,EAAvD,CAA0DC,UAA1D,CAAqEC,KAArE;AACD;;AAEDZ,EAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1DK,IAAAA,YAAY,CACV,oBAAaQ,eAAb,EAAmB,GAAnB,EAAwBZ,cAAxB,CADU,eAET;AAAK,MAAA,CAAC;AAAN,MAFS,EAGV,GAHU,CAAZ;AAKD,GANC,CAAF;AAQAD,EAAAA,EAAE,CAAC,8DAAD,EAAiE,YAAM;AACvEK,IAAAA,YAAY,CACV,oBAAaQ,eAAb,EAAmB,GAAnB,EAAwBA,eAAxB,CADU,eAET;AAAK,MAAA,CAAC,MAAN;AAAO,MAAA,CAAC,EAAC;AAAT,MAFS,EAGV,GAHU,CAAZ;AAKD,GANC,CAAF;AAQAb,EAAAA,EAAE,CAAC,oFAAD,EAAuF,YAAM;AAC7FK,IAAAA,YAAY,CACV,oBAAaQ,eAAb,EAAmB,GAAnB,EAAwBA,eAAxB,CADU,eAET;AAAK,MAAA,CAAC,EAAC;AAAP,MAFS,EAGV,GAHU,CAAZ;AAKD,GANC,CAAF;AAQAb,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/DS,IAAAA,WAAW,CACT,oBAAaI,eAAb,EAAmB,GAAnB,EAAwBA,eAAxB,CADS,eAER;AAAK,MAAA,CAAC,MAAN;AAAO,MAAA,CAAC,EAAE;AAAV,MAFQ,EAGT,GAHS,CAAX;AAKD,GANC,CAAF;AAQAb,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjDS,IAAAA,WAAW,CACT,oBAAaI,eAAb,EAAmB,GAAnB,EAAwBA,eAAxB,CADS,eAER;AAAK,MAAA,CAAC,EAAC,QAAP;AAAgB,MAAA,CAAC,EAAC;AAAlB,MAFQ,EAGT,GAHS,CAAX;AAKD,GANC,CAAF;AAQAb,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC/CS,IAAAA,WAAW,CACT,oBAAaI,eAAb,EAAmB,GAAnB,EAAwBA,eAAxB,EAA8BC,UADrB,eAER;AAAK,MAAA,CAAC,EAAC;AAAP,MAFQ,EAGT,GAHS,CAAX;AAKD,GANC,CAAF;AAOD,CAlEO,CAAR","sourcesContent":["import { expect } from 'chai';\nimport { any, bool } from 'prop-types';\nimport React from 'react';\n\nimport { disallowedIf } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('disallowedIf', () => {\n  it('throws when not given proper arguments', () => {\n    expect(() => disallowedIf(null, 'other', any)).to.throw(TypeError);\n    expect(() => disallowedIf(any, 'other')).to.throw(TypeError);\n    expect(() => disallowedIf(any, null, any)).to.throw(TypeError);\n  });\n\n  it('returns a function', () => {\n    expect(typeof disallowedIf(any, 'other', any)).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.be.instanceOf(Error);\n  }\n\n  it('passes when the other prop is null or undefined', () => {\n    assertPasses(\n      disallowedIf(bool, 'b', any),\n      (<div a />),\n      'a',\n    );\n  });\n\n  it('passes when the other prop does not match the specified type', () => {\n    assertPasses(\n      disallowedIf(bool, 'b', bool),\n      (<div a b=\"string\" />),\n      'a',\n    );\n  });\n\n  it('passes when the other prop matches the specified type and the prop is not provided', () => {\n    assertPasses(\n      disallowedIf(bool, 'b', bool),\n      (<div b=\"string\" />),\n      'a',\n    );\n  });\n\n  it('fails when the other prop matches the specified type', () => {\n    assertFails(\n      disallowedIf(bool, 'b', bool),\n      (<div a b={false} />),\n      'a',\n    );\n  });\n\n  it('fails when the provided propType fails', () => {\n    assertFails(\n      disallowedIf(bool, 'b', bool),\n      (<div a=\"string\" b=\"other string\" />),\n      'a',\n    );\n  });\n\n  it('fails when required and not provided', () => {\n    assertFails(\n      disallowedIf(bool, 'b', bool).isRequired,\n      (<div b=\"other string\" />),\n      'a',\n    );\n  });\n});\n"],"file":"disallowedIf.js"}