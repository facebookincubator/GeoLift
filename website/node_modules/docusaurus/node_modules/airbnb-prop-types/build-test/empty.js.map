{"version":3,"sources":["../test/empty.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","e","message","assertFails","be","instanceOf","Error","emptyRenderValues","undefined","nonEmptyRenderValues","Infinity","forEach","emptyValue","isRequired","nonEmptyValue"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\nimport inspect from 'object-inspect';\n\nimport { empty } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('empty', () => {\n  it('returns a function', () => {\n    expect(typeof empty()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    const e = callValidator(validator, element, propName, '\"empty\" test');\n    expect(e && e.message).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"empty\" test')).to.be.instanceOf(Error);\n  }\n\n  const emptyRenderValues = [null, undefined, '', false, []];\n  const nonEmptyRenderValues = [true, 'foo', 0, Infinity, {}];\n\n  emptyRenderValues.forEach((emptyValue) => {\n    it(`passes on empty render values: ${inspect(emptyValue)}`, () => {\n      const validator = empty();\n\n      assertPasses(validator, (<div foo={emptyValue} />), 'foo');\n      if (typeof emptyValue !== 'undefined') {\n        assertPasses(validator.isRequired, (<div foo={emptyValue} />), 'foo');\n      }\n    });\n\n    it(`passes on arrays of empty render values: ${inspect(emptyValue)}`, () => {\n      const validator = empty();\n\n      assertPasses(validator, (<div foo={[emptyValue]} />), 'foo');\n      assertPasses(validator.isRequired, (<div foo={[emptyValue]} />), 'foo');\n    });\n  });\n\n  nonEmptyRenderValues.forEach((nonEmptyValue) => {\n    it(`fails on non-empty render values: ${inspect(nonEmptyValue)}`, () => {\n      const validator = empty();\n\n      assertFails(validator, (<div foo={nonEmptyValue} />), 'foo');\n      assertFails(validator.isRequired, (<div foo={nonEmptyValue} />), 'foo');\n    });\n\n    it(`fails on arrays of non-empty render values: ${inspect(nonEmptyValue)}`, () => {\n      const validator = empty();\n\n      assertFails(validator, (<div foo={[nonEmptyValue]} />), 'foo');\n      assertFails(validator.isRequired, (<div foo={[nonEmptyValue]} />), 'foo');\n    });\n  });\n});\n"],"file":"empty.js"}