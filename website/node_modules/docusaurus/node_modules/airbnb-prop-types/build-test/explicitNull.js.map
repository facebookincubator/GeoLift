{"version":3,"sources":["../test/explicitNull.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","isRequired","undefined","NaN"],"mappings":";;AAAA;;AACA;;AAEA;;AAEA;;;;;;AAEAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC7B,8BAAc,qBAAd,GAA8BC,EAA9B,CAAiCC,KAAjC,CAAuC,UAAvC;AACD,GAFC,CAAF;;AAIA,WAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C,qBAA5C,CAAP,EAA2EL,EAA3E,CAA8EC,KAA9E,CAAoF,IAApF;AACD;;AAED,WAASK,WAAT,CAAqBH,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmD;AACjD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C,qBAA5C,CAAP,EAA2EL,EAA3E,CAA8EO,EAA9E,CAAiFC,UAAjF,CAA4FC,KAA5F;AACD;;AAEDV,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMI,SAAS,GAAG,qBAAlB;AAEAD,IAAAA,YAAY,CAACC,SAAD,eAAa;AAAK,MAAA,GAAG,EAAE;AAAV,MAAb,EAAkC,KAAlC,CAAZ;AACAD,IAAAA,YAAY,CAACC,SAAS,CAACO,UAAX,eAAwB;AAAK,MAAA,GAAG,EAAE;AAAV,MAAxB,EAA6C,KAA7C,CAAZ;AAEAR,IAAAA,YAAY,CAACC,SAAD,eAAa;AAAK,MAAA,GAAG,EAAEQ;AAAV,MAAb,EAAuC,KAAvC,CAAZ;AACAT,IAAAA,YAAY,CAACC,SAAD,eAAa,4CAAb,EAAuB,KAAvB,CAAZ;AACD,GARC,CAAF;AAUAJ,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACnD,QAAMI,SAAS,GAAG,qBAAlB;AAEAG,IAAAA,WAAW,CAACH,SAAS,CAACO,UAAX,eAAuB;AAAK,MAAA,GAAG,EAAEC;AAAV,MAAvB,EAAgD,KAAhD,CAAX;AACAL,IAAAA,WAAW,CAACH,SAAS,CAACO,UAAX,eAAuB,4CAAvB,EAAgC,KAAhC,CAAX;AACD,GALC,CAAF;AAOAX,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnCO,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAE;AAAV,MAAlB,EAAwC,KAAxC,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAEM;AAAV,MAAlB,EAAsC,KAAtC,CAAX;AACAN,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAE;AAAV,MAAlB,EAAqC,KAArC,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAE;AAAV,MAAlB,EAAqC,KAArC,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAC;AAAT,MAAlB,EAAmC,KAAnC,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAC;AAAT,MAAlB,EAAsC,KAAtC,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAE,eAAM,CAAE;AAAlB,MAAlB,EAA2C,KAA3C,CAAX;AACAA,IAAAA,WAAW,CAAC,qBAAD,eAAkB;AAAK,MAAA,GAAG,EAAE;AAAV,MAAlB,EAAuC,KAAvC,CAAX;AACD,GATC,CAAF;AAWAP,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjDO,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAE;AAAV,MAA7B,EAAmD,KAAnD,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAEE;AAAV,MAA7B,EAAiD,KAAjD,CAAX;AACAN,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAE;AAAV,MAA7B,EAAgD,KAAhD,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAE;AAAV,MAA7B,EAAgD,KAAhD,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAC;AAAT,MAA7B,EAA8C,KAA9C,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAC;AAAT,MAA7B,EAAiD,KAAjD,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAE,eAAM,CAAE;AAAlB,MAA7B,EAAsD,KAAtD,CAAX;AACAJ,IAAAA,WAAW,CAAC,sBAAeI,UAAhB,eAA6B;AAAK,MAAA,GAAG,EAAE;AAAV,MAA7B,EAAkD,KAAlD,CAAX;AACD,GATC,CAAF;AAUD,CAnDO,CAAR","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { explicitNull } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('explicitNull', () => {\n  it('returns a function', () => {\n    expect(typeof explicitNull()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"explicitNull\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"explicitNull\" test')).to.be.instanceOf(Error);\n  }\n\n  it('passes on null/undefined/missing', () => {\n    const validator = explicitNull();\n\n    assertPasses(validator, (<div foo={null} />), 'foo');\n    assertPasses(validator.isRequired, (<div foo={null} />), 'foo');\n\n    assertPasses(validator, (<div foo={undefined} />), 'foo');\n    assertPasses(validator, (<div />), 'foo');\n  });\n\n  it('fails on undefined/missing when required', () => {\n    const validator = explicitNull();\n\n    assertFails(validator.isRequired, <div foo={undefined} />, 'foo');\n    assertFails(validator.isRequired, <div />, 'foo');\n  });\n\n  it('fails on any other value', () => {\n    assertFails(explicitNull(), (<div foo={false} />), 'foo');\n    assertFails(explicitNull(), (<div foo={NaN} />), 'foo');\n    assertFails(explicitNull(), (<div foo={[]} />), 'foo');\n    assertFails(explicitNull(), (<div foo={{}} />), 'foo');\n    assertFails(explicitNull(), (<div foo=\"\" />), 'foo');\n    assertFails(explicitNull(), (<div foo=\"foo\" />), 'foo');\n    assertFails(explicitNull(), (<div foo={() => {}} />), 'foo');\n    assertFails(explicitNull(), (<div foo={/a/g} />), 'foo');\n  });\n\n  it('fails on any other value when required', () => {\n    assertFails(explicitNull().isRequired, (<div foo={false} />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo={NaN} />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo={[]} />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo={{}} />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo=\"\" />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo=\"foo\" />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo={() => {}} />), 'foo');\n    assertFails(explicitNull().isRequired, (<div foo={/a/g} />), 'foo');\n  });\n});\n"],"file":"explicitNull.js"}