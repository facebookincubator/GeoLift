{"version":3,"sources":["../test/integer.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","undefined","Infinity","NaN","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { integer } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('integer', () => {\n  it('returns a function', () => {\n    expect(typeof integer()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'integer test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'integer test')).to.be.instanceOf(Error);\n  }\n\n  it('passes on nil values', () => {\n    assertPasses(integer(), <div a={undefined} />, 'a');\n    assertPasses(integer(), <div a={null} />, 'a');\n  });\n\n  it('passes on zero', () => assertPasses(\n    integer(),\n    (<div a={0} />),\n    'a',\n  ));\n\n  it('passes on positive numbers', () => {\n    assertPasses(integer(), <div a={1} />, 'a');\n    assertPasses(integer(), <div a={42} />, 'a');\n  });\n\n  it('passes on negative numbers', () => {\n    assertPasses(integer(), <div a={-1} />, 'a');\n    assertPasses(integer(), <div a={-42} />, 'a');\n  });\n\n  it('fails on non-integers', () => {\n    assertFails(integer(), <div a={1.5} />, 'a');\n    assertFails(integer(), <div a={1.999999} />, 'a');\n    assertFails(integer(), <div a={(0.1 + 0.2) * 10} />, 'a');\n  });\n\n  it('fails on number edge cases', () => {\n    assertFails(integer(), <div a={-Infinity} />, 'a');\n    assertFails(integer(), <div a={Infinity} />, 'a');\n    assertFails(integer(), <div a={NaN} />, 'a');\n  });\n\n  it('passes on negative zero', () => {\n    assertPasses(integer(), <div a={-0} />, 'a');\n  });\n\n  describe('isRequired', () => {\n    it('passes when not required', () => assertPasses(\n      integer(),\n      (<div />),\n      'a',\n    ));\n\n    it('fails when required', () => assertFails(\n      integer().isRequired,\n      (<div />),\n      'a',\n    ));\n  });\n});\n"],"file":"integer.js"}