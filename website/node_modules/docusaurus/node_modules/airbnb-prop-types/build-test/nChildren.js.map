{"version":3,"sources":["../test/nChildren.jsx"],"names":["describe","it","to","TypeError","NaN","Infinity","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","number"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { number } from 'prop-types';\nimport React from 'react';\n\nimport { nChildren, childrenOfType } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('nChildren', () => {\n  it('throws when not given a positive number', () => {\n    expect(() => nChildren()).to.throw(TypeError);\n    expect(() => nChildren(null)).to.throw(TypeError);\n    expect(() => nChildren({})).to.throw(TypeError);\n    expect(() => nChildren('1')).to.throw(TypeError);\n    expect(() => nChildren([])).to.throw(TypeError);\n    expect(() => nChildren(NaN)).to.throw(TypeError);\n    expect(() => nChildren(-1)).to.throw(TypeError);\n    expect(() => nChildren(-Infinity)).to.throw(TypeError);\n  });\n\n  it('returns a function', () => {\n    expect(typeof nChildren(1)).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName)).to.be.instanceOf(Error);\n  }\n\n  it('fails when run on a prop that is not \"children\"', () => {\n    assertFails(nChildren(0), <div />, 'foo');\n  });\n\n  it('fails when the children are less than n', () => {\n    const validator = nChildren(3);\n    assertFails(validator, <div />, 'children');\n    assertFails(validator, <div><i /></div>, 'children');\n    assertFails(\n      validator,\n      <div>\n        <i />\n        <i />\n      </div>,\n      'children',\n    );\n  });\n\n  it('passes when the children are equal to n', () => {\n    const validator = nChildren(3);\n    assertPasses(\n      validator,\n      <div>\n        <i />\n        <i />\n        <i />\n      </div>,\n      'children',\n    );\n  });\n\n  it('fails when the children are more than n', () => {\n    const validator = nChildren(1);\n    assertFails(\n      validator,\n      <div>\n        <i />\n        <i />\n      </div>,\n      'children',\n    );\n  });\n\n  it('validates against the optionally provided propType', () => {\n    assertFails(nChildren(1, number), <div><i /></div>, 'children');\n\n    assertPasses(nChildren(1, childrenOfType('i')), <div><i /></div>, 'children');\n\n    assertFails(nChildren(1, childrenOfType('span')), <div><i /></div>, 'children');\n  });\n});\n"],"file":"nChildren.js"}