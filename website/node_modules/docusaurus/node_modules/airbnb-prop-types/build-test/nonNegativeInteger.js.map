{"version":3,"sources":["../test/nonNegativeInteger.jsx"],"names":["describe","it","nonNegativeInteger","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","undefined","Infinity","NaN","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { nonNegativeInteger } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('nonNegativeInteger', () => {\n  it('is a function', () => {\n    expect(typeof nonNegativeInteger).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'nonNegativeInteger test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'nonNegativeInteger test')).to.be.instanceOf(Error);\n  }\n\n  it('passes on nil values', () => {\n    assertPasses(nonNegativeInteger, <div a={undefined} />, 'a');\n    assertPasses(nonNegativeInteger, <div a={null} />, 'a');\n  });\n\n  it('passes on zero', () => assertPasses(\n    nonNegativeInteger,\n    (<div a={0} />),\n    'a',\n  ));\n\n  it('passes on positive numbers', () => {\n    assertPasses(nonNegativeInteger, <div a={1} />, 'a');\n    assertPasses(nonNegativeInteger, <div a={42} />, 'a');\n  });\n\n  it('fails on negative numbers', () => {\n    assertFails(nonNegativeInteger, <div a={-1} />, 'a');\n    assertFails(nonNegativeInteger, <div a={-42} />, 'a');\n  });\n\n  it('fails on non-integers', () => {\n    assertFails(nonNegativeInteger, <div a={1.5} />, 'a');\n    assertFails(nonNegativeInteger, <div a={1.999999} />, 'a');\n    assertFails(nonNegativeInteger, <div a={(0.1 + 0.2) * 10} />, 'a');\n  });\n\n  it('fails on number edge cases', () => {\n    assertFails(nonNegativeInteger, <div a={-Infinity} />, 'a');\n    assertFails(nonNegativeInteger, <div a={Infinity} />, 'a');\n    assertFails(nonNegativeInteger, <div a={NaN} />, 'a');\n  });\n\n  it('fails on negative zero', () => {\n    assertFails(nonNegativeInteger, <div a={-0} />, 'a');\n  });\n\n  describe('isRequired', () => {\n    it('passes when not required', () => assertPasses(\n      nonNegativeInteger,\n      (<div />),\n      'a',\n    ));\n\n    it('fails when required', () => assertFails(\n      nonNegativeInteger.isRequired,\n      (<div />),\n      'a',\n    ));\n  });\n});\n"],"file":"nonNegativeInteger.js"}