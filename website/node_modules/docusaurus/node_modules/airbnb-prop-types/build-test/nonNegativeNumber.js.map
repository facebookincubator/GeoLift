{"version":3,"sources":["../test/nonNegativeNumber.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","undefined","isRequired","Infinity","NaN"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { nonNegativeNumber } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('nonNegativeNumber', () => {\n  it('returns a function', () => {\n    expect(typeof nonNegativeNumber()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'nonNegativeNumber test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, 'nonNegativeNumber test')).to.be.instanceOf(Error);\n  }\n\n  it('passes on nil values', () => {\n    assertPasses(nonNegativeNumber(), <div a={undefined} />, 'a');\n    assertPasses(nonNegativeNumber(), <div a={null} />, 'a');\n  });\n\n  it('passes on zero', () => assertPasses(\n    nonNegativeNumber(),\n    (<div a={0} />),\n    'a',\n  ));\n\n  it('passes on positive numbers', () => {\n    const validator = nonNegativeNumber();\n\n    assertPasses(validator, <div a={1} />, 'a');\n    assertPasses(validator.isRequired, <div a={1} />, 'a');\n\n    assertPasses(validator, <div a={42} />, 'a');\n    assertPasses(validator.isRequired, <div a={42} />, 'a');\n  });\n\n  it('fails on negative numbers', () => {\n    const validator = nonNegativeNumber();\n\n    assertFails(validator, <div a={-1} />, 'a');\n    assertFails(validator.isRequired, <div a={-1} />, 'a');\n\n    assertFails(validator, <div a={-42} />, 'a');\n    assertFails(validator.isRequired, <div a={-42} />, 'a');\n  });\n\n  it('passes on positive non-integers', () => {\n    assertPasses(nonNegativeNumber(), <div a={1.5} />, 'a');\n    assertPasses(nonNegativeNumber(), <div a={1.999999} />, 'a');\n    assertPasses(nonNegativeNumber(), <div a={(0.1 + 0.2) * 10} />, 'a');\n  });\n\n  it('fails on negative non-integers', () => {\n    assertFails(nonNegativeNumber(), <div a={-1.5} />, 'a');\n    assertFails(nonNegativeNumber(), <div a={-1.999999} />, 'a');\n    assertFails(nonNegativeNumber(), <div a={-(0.1 + 0.2) * 10} />, 'a');\n  });\n\n  it('fails on number edge cases', () => {\n    assertFails(nonNegativeNumber(), <div a={-Infinity} />, 'a');\n    assertFails(nonNegativeNumber(), <div a={Infinity} />, 'a');\n    assertFails(nonNegativeNumber(), <div a={NaN} />, 'a');\n  });\n\n  it('fails on negative zero', () => {\n    assertFails(nonNegativeNumber(), <div a={-0} />, 'a');\n  });\n\n  describe('isRequired', () => {\n    it('passes when not required', () => assertPasses(\n      nonNegativeNumber(),\n      (<div />),\n      'a',\n    ));\n\n    it('fails when required', () => assertFails(\n      nonNegativeNumber().isRequired,\n      (<div />),\n      'a',\n    ));\n  });\n});\n"],"file":"nonNegativeNumber.js"}