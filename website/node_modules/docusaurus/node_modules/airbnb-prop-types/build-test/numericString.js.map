{"version":3,"sources":["../test/numericString.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { numericString } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('numericString', () => {\n  it('returns a function', () => {\n    expect(typeof numericString()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"numericString\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"numericString\" test')).to.be.instanceOf(Error);\n  }\n\n  it('behaves when absent', () => {\n    const validator = numericString();\n    assertPasses(validator, (<div />), 'a');\n    assertFails(validator.isRequired, (<div />), 'a');\n  });\n\n  it('fails when not a string', () => {\n    assertFails(numericString(), (<div a />), 'a');\n    assertFails(numericString(), (<div a={false} />), 'a');\n    assertFails(numericString(), (<div a={42} />), 'a');\n    assertFails(numericString(), (<div a={[]} />), 'a');\n    assertFails(numericString(), (<div a={{}} />), 'a');\n    assertFails(numericString(), (<div a={() => {}} />), 'a');\n  });\n\n  it('passes on the zeroes', () => {\n    const validator = numericString();\n\n    assertPasses(validator, (<div a=\"0\" />), 'a');\n    assertPasses(validator.isRequired, (<div a=\"0\" />), 'a');\n    assertPasses(validator, (<div a=\"-0\" />), 'a');\n    assertPasses(validator.isRequired, (<div a=\"-0\" />), 'a');\n    assertPasses(validator, (<div a=\"+0\" />), 'a');\n    assertPasses(validator.isRequired, (<div a=\"+0\" />), 'a');\n  });\n\n  it('passes when a numeric string', () => {\n    assertPasses(numericString(), (<div a=\"123\" />), 'a');\n    assertPasses(numericString(), (<div a=\"-123\" />), 'a');\n    assertPasses(numericString(), (<div a=\"+123\" />), 'a');\n\n    assertPasses(numericString(), (<div a=\"123.456\" />), 'a');\n    assertPasses(numericString(), (<div a=\"-123.456\" />), 'a');\n    assertPasses(numericString(), (<div a=\"+123.456\" />), 'a');\n\n    assertPasses(numericString(), (<div a=\"0.45\" />), 'a');\n    assertPasses(numericString(), (<div a=\"-0.45\" />), 'a');\n    assertPasses(numericString(), (<div a=\"+0.45\" />), 'a');\n  });\n\n  it('fails when not a numeric string', () => {\n    assertFails(numericString(), (<div a=\"123a\" />), 'a');\n    assertFails(numericString(), (<div a=\"123.456.789\" />), 'a');\n    assertFails(numericString(), (<div a=\"1,234.567\" />), 'a');\n  });\n\n  it('fails on edge cases', () => {\n    const validator = numericString();\n\n    assertFails(validator, (<div a=\"NaN\" />), 'a');\n    assertFails(validator, (<div a=\"-NaN\" />), 'a');\n    assertFails(validator, (<div a=\"+NaN\" />), 'a');\n\n    assertFails(validator, (<div a=\"Infinity\" />), 'a');\n    assertFails(validator, (<div a=\"-Infinity\" />), 'a');\n    assertFails(validator, (<div a=\"+Infinity\" />), 'a');\n  });\n\n  it('fails on edge cases when required', () => {\n    const validator = numericString().isRequired;\n\n    assertFails(validator, (<div a=\"NaN\" />), 'a');\n    assertFails(validator, (<div a=\"-NaN\" />), 'a');\n    assertFails(validator, (<div a=\"+NaN\" />), 'a');\n\n    assertFails(validator, (<div a=\"Infinity\" />), 'a');\n    assertFails(validator, (<div a=\"-Infinity\" />), 'a');\n    assertFails(validator, (<div a=\"+Infinity\" />), 'a');\n  });\n});\n"],"file":"numericString.js"}