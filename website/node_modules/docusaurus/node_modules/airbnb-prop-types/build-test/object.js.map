{"version":3,"sources":["../test/object.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","undefined","isRequired","NaN"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { object } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('object', () => {\n  it('returns a function', () => {\n    expect(typeof object()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"object\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"object\" test')).to.be.instanceOf(Error);\n  }\n\n  it('passes on null/undefined', () => {\n    const validator = object();\n\n    assertPasses(validator, (<div foo={null} />), 'foo');\n    assertPasses(validator, (<div foo={undefined} />), 'foo');\n  });\n\n  it('fails on null/undefined when required', () => {\n    const validator = object().isRequired;\n\n    assertFails(validator, (<div foo={null} />), 'foo');\n    assertFails(validator, (<div foo={undefined} />), 'foo');\n  });\n\n  it('fails on arrays and functions', () => {\n    const validator = object();\n\n    assertFails(validator, (<div foo={[]} />), 'foo');\n    assertFails(validator.isRequired, (<div foo={[]} />), 'foo');\n\n    assertFails(validator, (<div foo={() => {}} />), 'foo');\n    assertFails(validator.isRequired, (<div foo={() => {}} />), 'foo');\n  });\n\n  it('fails on any other value', () => {\n    assertFails(object(), (<div foo={false} />), 'foo');\n    assertFails(object(), (<div foo />), 'foo');\n    assertFails(object(), (<div foo={NaN} />), 'foo');\n    assertFails(object(), (<div foo=\"\" />), 'foo');\n    assertFails(object(), (<div foo=\"foo\" />), 'foo');\n  });\n\n  it('passes on non-array non-function objects', () => {\n    const validator = object();\n\n    assertPasses(validator, (<div foo={{}} />), 'foo');\n    assertPasses(validator.isRequired, (<div foo={{}} />), 'foo');\n\n    assertPasses(validator, (<div foo={/a/g} />), 'foo');\n    assertPasses(validator.isRequired, (<div foo={/a/g} />), 'foo');\n  });\n});\n"],"file":"object.js"}