{"version":3,"sources":["../test/or.jsx"],"names":["describe","it","string","bool","to","equal","TypeError","undefined","RangeError","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","number","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport {\n  arrayOf,\n  bool,\n  number,\n  string,\n} from 'prop-types';\nimport React from 'react';\n\nimport { or, explicitNull } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('or', () => {\n  it('returns a function', () => {\n    expect(typeof or([string, bool])).to.equal('function');\n  });\n\n  it('throws if given a non-array', () => {\n    expect(() => or()).to.throw(TypeError);\n    expect(() => or(null)).to.throw(TypeError);\n    expect(() => or(undefined)).to.throw(TypeError);\n    expect(() => or({})).to.throw(TypeError);\n  });\n\n  it('throws if given an array of zero or one items', () => {\n    expect(() => or([])).to.throw(RangeError);\n    expect(() => or([string])).to.throw(RangeError);\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"or\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"or\" test')).to.be.instanceOf(Error);\n  }\n\n  it('allows composing propTypes', () => {\n    const validator = or([bool, number, arrayOf(string)]);\n\n    assertPasses(validator, (<div a />), 'a');\n    assertPasses(validator, (<div a={1} />), 'a');\n    assertPasses(validator, (<div a={[]} />), 'a');\n    assertPasses(validator, (<div a={['b', 'c']} />), 'a');\n    assertFails(validator, (<div a={['b', 1]} />), 'a');\n    assertFails(validator, (<div a=\"b\" />), 'a');\n\n    assertPasses(validator.isRequired, (<div a />), 'a');\n    assertPasses(validator.isRequired, (<div a={1} />), 'a');\n    assertPasses(validator.isRequired, (<div a={[]} />), 'a');\n    assertPasses(validator.isRequired, (<div a={['b', 'c']} />), 'a');\n    assertFails(validator.isRequired, (<div a={['b', 1]} />), 'a');\n    assertFails(validator.isRequired, (<div a=\"b\" />), 'a');\n\n    assertFails(validator.isRequired, (<div />), 'a');\n  });\n\n  describe('works with explicitNull', () => {\n    it('works when outer and inner are optional', () => {\n      assertPasses(or([bool.isRequired, explicitNull()]), (<div a />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]), (<div a />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull()]), (<div a={false} />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]), (<div a={false} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull()]), (<div a={null} />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]), (<div a={null} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull()]), (<div />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]), (<div />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull()]), (<div a={undefined} />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]), (<div a={undefined} />), 'a');\n    });\n\n    it('works when outer is optional, inner is required', () => {\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]), (<div a />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]), (<div a />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]), (<div a={false} />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]), (<div a={false} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]), (<div a={null} />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]), (<div a={null} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]), (<div />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]), (<div />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]), (<div a={undefined} />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]), (<div a={undefined} />), 'a');\n    });\n\n    it('works when outer is required, inner is optional', () => {\n      assertPasses(or([bool.isRequired, explicitNull()]).isRequired, (<div a />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]).isRequired, (<div a />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull()]).isRequired, (<div a={false} />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]).isRequired, (<div a={false} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull()]).isRequired, (<div a={null} />), 'a');\n      assertPasses(or([explicitNull(), bool.isRequired]).isRequired, (<div a={null} />), 'a');\n\n      assertFails(or([bool.isRequired, explicitNull()]).isRequired, (<div />), 'a');\n      assertFails(or([explicitNull(), bool.isRequired]).isRequired, (<div />), 'a');\n      assertFails(or([bool.isRequired, explicitNull()]).isRequired, (<div a={undefined} />), 'a');\n      assertFails(or([explicitNull(), bool.isRequired]).isRequired, (<div a={undefined} />), 'a');\n    });\n\n    it('works when outer is required, inner is required', () => {\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]).isRequired, (<div a />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]).isRequired, (<div a />), 'a');\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]).isRequired, (<div a={false} />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]).isRequired, (<div a={false} />), 'a');\n\n      assertPasses(or([bool.isRequired, explicitNull().isRequired]).isRequired, (<div a={null} />), 'a');\n      assertPasses(or([explicitNull().isRequired, bool.isRequired]).isRequired, (<div a={null} />), 'a');\n\n      assertFails(or([bool.isRequired, explicitNull().isRequired]).isRequired, (<div />), 'a');\n      assertFails(or([explicitNull().isRequired, bool.isRequired]).isRequired, (<div />), 'a');\n      assertFails(or([bool.isRequired, explicitNull().isRequired]).isRequired, (<div a={undefined} />), 'a');\n      assertFails(or([explicitNull().isRequired, bool.isRequired]).isRequired, (<div a={undefined} />), 'a');\n    });\n  });\n});\n"],"file":"or.js"}