{"version":3,"sources":["../test/range.jsx"],"names":["describe","it","to","equal","NaN","RangeError","Infinity","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { range } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('range', () => {\n  it('returns a function', () => {\n    expect(typeof range(0, 1)).to.equal('function');\n  });\n\n  it('throws with invalid lengths', () => {\n    expect(() => range(NaN, 2)).to.throw(RangeError);\n    expect(() => range(2, NaN)).to.throw(RangeError);\n    expect(() => range(Infinity, 2)).to.throw(RangeError);\n    expect(() => range(2, Infinity)).to.throw(RangeError);\n    expect(() => range(-Infinity, 2)).to.throw(RangeError);\n    expect(() => range(2, -Infinity)).to.throw(RangeError);\n    expect(() => range(0.5, 2)).to.throw(RangeError);\n    expect(() => range(2, 0.5)).to.throw(RangeError);\n  });\n\n  it('throws when the min/max are the same', () => {\n    expect(() => range(2, 2)).to.throw(RangeError);\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"range\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"range\" test')).to.be.instanceOf(Error);\n  }\n\n  it('passes when inside the range', () => {\n    assertPasses(range(-1, 2), (<div a={-1} />), 'a');\n    assertPasses(range(-1, 2), (<div a={-0} />), 'a');\n    assertPasses(range(-1, 2), (<div a={0} />), 'a');\n    assertPasses(range(-1, 2), (<div a={1} />), 'a');\n  });\n\n  it('fails when outside the range', () => {\n    assertFails(range(-1, 2), (<div a={2} />), 'a');\n    assertFails(range(-1, 2), (<div a={-2} />), 'a');\n    assertFails(range(-1, 2), (<div a={1.5} />), 'a');\n    assertFails(range(-1, 2), (<div a={-0.5} />), 'a');\n  });\n});\n"],"file":"range.js"}