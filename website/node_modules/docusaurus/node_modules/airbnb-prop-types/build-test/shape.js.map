{"version":3,"sources":["../test/shape.jsx"],"names":["describe","it","shape","to","equal","TypeError","undefined","NaN","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","toFixed","func","isRequired","missing","bool","length","number","nope"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport {\n  bool,\n  func,\n  oneOf,\n  number,\n} from 'prop-types';\nimport React from 'react';\n\nimport { shape } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('shape', () => {\n  it('is a function', () => {\n    expect(typeof shape).to.equal('function');\n  });\n\n  describe('errors', () => {\n    it('throws if not given a shape object', () => {\n      expect(() => shape()).to.throw(TypeError);\n      expect(() => shape(undefined)).to.throw(TypeError);\n      expect(() => shape(null)).to.throw(TypeError);\n      expect(() => shape([])).to.throw(TypeError);\n      expect(() => shape('')).to.throw(TypeError);\n      expect(() => shape(42)).to.throw(TypeError);\n      expect(() => shape(NaN)).to.throw(TypeError);\n    });\n  });\n\n  describe('validator', () => {\n    it('returns a function', () => {\n      expect(typeof shape({})).to.equal('function');\n    });\n\n    function assertPasses(validator, element, propName) {\n      expect(callValidator(validator, element, propName, '\"shape\" test')).to.equal(null);\n    }\n\n    function assertFails(validator, element, propName) {\n      expect(callValidator(validator, element, propName, '\"shape\" test')).to.be.instanceOf(Error);\n    }\n\n    it('behaves when nullary', () => {\n      const validator = shape({ toFixed: func.isRequired });\n\n      assertPasses(validator, (<div />), 'a');\n      assertPasses(validator, (<div a={null} />), 'a');\n      assertPasses(validator, (<div a={undefined} />), 'a');\n\n      assertFails(validator.isRequired, (<div />), 'a');\n      assertFails(validator.isRequired, (<div a={null} />), 'a');\n      assertFails(validator.isRequired, (<div a={undefined} />), 'a');\n    });\n\n    it('enforces the provided type', () => {\n      assertPasses(\n        shape({ toFixed: func.isRequired }),\n        (<div foo={3} />),\n        'foo',\n      );\n      assertFails(\n        shape({ missing: bool.isRequired }),\n        (<div foo=\"3\" />),\n        'foo',\n      );\n    });\n\n    it('enforces the provided shape', () => {\n      assertPasses(\n        shape({\n          length: oneOf([2]),\n        }),\n        (<div foo={[1, 2]} />),\n        'foo',\n      );\n      assertFails(\n        shape({\n          length: oneOf([2]),\n          missing: number.isRequired,\n        }),\n        (<div foo={[1, 2]} />),\n        'foo',\n      );\n      assertFails(\n        shape({\n          length: oneOf([1]),\n        }),\n        (<div foo={[1, 2]} />),\n        'foo',\n      );\n    });\n\n    it('skips falsy shape keys', () => {\n      assertPasses(\n        shape({ toFixed: func.isRequired, missing: null, nope: false }),\n        (<div foo={3} />),\n        'foo',\n      );\n    });\n  });\n});\n"],"file":"shape.js"}