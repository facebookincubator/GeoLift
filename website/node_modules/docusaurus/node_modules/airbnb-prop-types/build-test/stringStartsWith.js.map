{"version":3,"sources":["../test/stringStartsWith.jsx"],"names":["describe","it","to","equal","TypeError","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","isRequired"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { stringStartsWith } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('stringStartsWith', () => {\n  it('returns a function', () => {\n    expect(typeof stringStartsWith(' ')).to.equal('function');\n  });\n\n  it('throws when given a non-string', () => {\n    expect(() => stringStartsWith()).to.throw(TypeError);\n    expect(() => stringStartsWith(null)).to.throw(TypeError);\n    expect(() => stringStartsWith(true)).to.throw(TypeError);\n    expect(() => stringStartsWith(false)).to.throw(TypeError);\n    expect(() => stringStartsWith({})).to.throw(TypeError);\n    expect(() => stringStartsWith([])).to.throw(TypeError);\n  });\n\n  it('throws when given an empty string', () => {\n    expect(() => stringStartsWith('')).to.throw(TypeError);\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"stringStartsWith\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"stringStartsWith\" test')).to.be.instanceOf(Error);\n  }\n\n  it('behaves when absent', () => {\n    const validator = stringStartsWith('foo');\n    assertPasses(validator, (<div />), 'a');\n    assertFails(validator.isRequired, (<div />), 'a');\n  });\n\n  it('fails when not a string', () => {\n    const validator = stringStartsWith('foo');\n    assertFails(validator, (<div a />), 'a');\n    assertFails(validator, (<div a={false} />), 'a');\n    assertFails(validator, (<div a={42} />), 'a');\n    assertFails(validator, (<div a={[]} />), 'a');\n    assertFails(validator, (<div a={{}} />), 'a');\n    assertFails(validator, (<div a={() => {}} />), 'a');\n  });\n\n  it('passes when the string starts with the requested substring', () => {\n    const validator = stringStartsWith('foo');\n    assertPasses(validator, (<div a=\"food\" />), 'a');\n    assertPasses(validator, (<div a=\"foobar\" />), 'a');\n    assertPasses(validator, (<div a=\"foo bar\" />), 'a');\n  });\n\n  it('fails when the string does not start with the requested substring', () => {\n    const validator = stringStartsWith('foo');\n    assertFails(validator, (<div a=\"Food\" />), 'a');\n    assertFails(validator, (<div a=\"Foobar\" />), 'a');\n    assertFails(validator, (<div a=\"bar baz\" />), 'a');\n    assertFails(validator, (<div a=\"fo\" />), 'a');\n    assertFails(validator.isRequired, (<div a=\"Food\" />), 'a');\n    assertFails(validator.isRequired, (<div a=\"Foobar\" />), 'a');\n    assertFails(validator.isRequired, (<div a=\"bar baz\" />), 'a');\n    assertFails(validator.isRequired, (<div a=\"fo\" />), 'a');\n  });\n\n  it('fails when the string matches the requested substring', () => {\n    const validator = stringStartsWith('foo');\n    assertFails(validator, (<div a=\"foo\" />), 'a');\n    assertFails(validator.isRequired, (<div a=\"foo\" />), 'a');\n  });\n});\n"],"file":"stringStartsWith.js"}