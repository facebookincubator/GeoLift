{"version":3,"sources":["../test/uniqueArray.jsx"],"names":["describe","it","to","equal","assertPasses","validator","element","propName","assertFails","be","instanceOf","Error","isRequired","arr"],"mappings":";;AAAA;;AACA;;AAEA;;AAEA;;;;;;AAEAA,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC5BC,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC7B,8BAAc,oBAAd,GAA6BC,EAA7B,CAAgCC,KAAhC,CAAsC,UAAtC;AACD,GAFC,CAAF;;AAIA,WAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C,oBAA5C,CAAP,EAA0EL,EAA1E,CAA6EC,KAA7E,CAAmF,IAAnF;AACD;;AAED,WAASK,WAAT,CAAqBH,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmD;AACjD,sBAAO,+BAAcF,SAAd,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C,oBAA5C,CAAP,EAA0EL,EAA1E,CAA6EO,EAA7E,CAAgFC,UAAhF,CAA2FC,KAA3F;AACD;;AACDV,EAAAA,EAAE,CAAC,mBAAD,EAAsB;AAAA,WAAMO,WAAW,CACvC,oBADuC,eAEtC;AAAK,MAAA,GAAG,EAAC;AAAT,MAFsC,EAGvC,KAHuC,CAAjB;AAAA,GAAtB,CAAF;AAMAP,EAAAA,EAAE,CAAC,4BAAD,EAA+B;AAAA,WAAMG,YAAY,CACjD,oBADiD,eAEhD;AAAK,MAAA,GAAG,EAAC;AAAT,MAFgD,EAGjD,SAHiD,CAAlB;AAAA,GAA/B,CAAF;AAMAH,EAAAA,EAAE,CAAC,8BAAD,EAAiC;AAAA,WAAMO,WAAW,CAClD,qBAAcI,UADoC,eAEjD;AAAK,MAAA,GAAG,EAAC;AAAT,MAFiD,EAGlD,SAHkD,CAAjB;AAAA,GAAjC,CAAF;AAMAX,EAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAM;AAC9BO,IAAAA,WAAW,CACT,oBADS,eAER;AAAK,MAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AAAV,MAFQ,EAGT,KAHS,CAAX;AAKAJ,IAAAA,YAAY,CACV,oBADU,eAET;AAAK,MAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAV,MAFS,EAGV,KAHU,CAAZ;AAKD,GAXC,CAAF;AAaAH,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC7C,QAAMY,GAAG,GAAG,CAAC,CAAD,CAAZ;AAEAL,IAAAA,WAAW,CACT,oBADS,eAER;AAAK,MAAA,GAAG,EAAE,CAAC,CAAC,CAAD,CAAD,EAAMK,GAAN,EAAWA,GAAX;AAAV,MAFQ,EAGT,KAHS,CAAX;AAKAT,IAAAA,YAAY,CACV,oBADU,eAET;AAAK,MAAA,GAAG,EAAE,CAAC,CAAC,CAAD,CAAD,EAAMS,GAAN,EAAW,CAAC,CAAD,CAAX;AAAV,MAFS,EAGV,KAHU,CAAZ;AAKD,GAbC,CAAF;AAcD,CAzDO,CAAR","sourcesContent":["import { expect } from 'chai';\nimport React from 'react';\n\nimport { uniqueArray } from '..';\n\nimport callValidator from './_callValidator';\n\ndescribe('uniqueArray', () => {\n  it('returns a function', () => {\n    expect(typeof uniqueArray()).to.equal('function');\n  });\n\n  function assertPasses(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"uniqueArray\" test')).to.equal(null);\n  }\n\n  function assertFails(validator, element, propName) {\n    expect(callValidator(validator, element, propName, '\"uniqueArray\" test')).to.be.instanceOf(Error);\n  }\n  it('requires an array', () => assertFails(\n    uniqueArray(),\n    (<div foo=\"bar\" />),\n    'foo',\n  ));\n\n  it('is not required by default', () => assertPasses(\n    uniqueArray(),\n    (<div foo=\"bar\" />),\n    'missing',\n  ));\n\n  it('is required with .isRequired', () => assertFails(\n    uniqueArray().isRequired,\n    (<div foo=\"bar\" />),\n    'missing',\n  ));\n\n  it('enforces uniqueness', () => {\n    assertFails(\n      uniqueArray(),\n      (<div foo={[3, 1, 2, 3, 4]} />),\n      'foo',\n    );\n    assertPasses(\n      uniqueArray(),\n      (<div foo={[1, 2, 3, 4]} />),\n      'foo',\n    );\n  });\n\n  it('enforces uniqueness of objects too', () => {\n    const arr = [1];\n\n    assertFails(\n      uniqueArray(),\n      (<div foo={[[1], arr, arr]} />),\n      'foo',\n    );\n    assertPasses(\n      uniqueArray(),\n      (<div foo={[[1], arr, [1]]} />),\n      'foo',\n    );\n  });\n});\n"],"file":"uniqueArray.js"}